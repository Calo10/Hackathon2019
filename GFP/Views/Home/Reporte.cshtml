@{
    ViewData["Title"] = "Aplicacion de Reglas";
}



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <link rel="stylesheet" href="/public/css/bootstrap.min.css">

    <title>Document</title>
</head>
<body>
    <nav class="navbar navbar-light"></nav>

    <h1>Analytics</h1>

    <button class="btn-info" onclick="getData()">Get Data</button>

    <div id="main">

    </div>

    <hr><br>
    <div class="row">
        <div class="col-md-12">
            <canvas id="payment_chart" width="800" height="500"></canvas>
        </div>
        <div class="col-md-12">
            <canvas id="program_chart" width="500" height="300"></canvas>
        </div>

    </div>





    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.bundle.js"></script>

    <script>
   var ctx2 = document.getElementById('program_chart').getContext('2d');
    var planningChart = new Chart(ctx2, {
        type: 'pie',
        data: {
            labels: ['Validado', 'Rechazado'],
            datasets: [{
                label: 'Planning',
                data: [80, 100],
                backgroundColor: [
                    'rgba(255, 255, 255, 0.2)',
                ],
                borderColor: [
                    'rgba(0, 0, 255, 1)',
                ],
                borderWidth: 1
            },
            ]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            animation: {
                duration:3000
            },
            responsive:false,
            maintainAspectRatio: false

        }
    });


        function addData(chart, label, data) {
                chart.data.labels.push(label);
                chart.data.datasets.forEach((dataset) => {
                    dataset.data.push(data);
                });
                chart.update();
            }

        function removeData(chart) {
            chart.data.labels.pop();
            chart.data.datasets.forEach((dataset) => {
                dataset.data.pop();
            });
            chart.update();
        }


        $(document).ready(()=>{

        });
        function getData(){
                var program_array = [];

                $.getJSON("/css/data.json", function(data){
                console.log("get Data!");
                    $.each(data, function(index, row){
                        $("holder_table").append("<tr>");

                        addData(myChart, row.Description, row.Value);

/*
                        if(!(row.Description in program_array)){
                            program_array.push(row.Description);
                            console.log("PushMoment: "+row.Description);
                        }
*/
                        if(program_array.indexOf(row.Description) == -1)
                        {
                            program_array.push([row.Description, 1]);
                        }



                        $("holder_table").append("</tr>");
                    });

                    console.log("capture Data");

                program_array.forEach(item =>{
                    console.log("Program:"+item);
                })
                });


            }


            var ctx = document.getElementById('payment_chart').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: [],
            datasets: [{
                label: 'Value X Program',
                data: [],
                backgroundColor: [
                    'rgba(255, 255, 255, 0.5)',
                ],
                borderColor: [
                    'rgba(0, 0, 255, 1)',
                ],
                borderWidth: 1
            },
            {
                label: "Trent",
                type: "line",
                borderColor: "#FF",
                data: [],
                fill: false
            }
            ]
        },
        options: {
            scales: {
                yAxes: [{
                    ticks: {
                        beginAtZero: true
                    }
                }]
            },
            animation: {
                duration:3000
            },
            responsive:false,
            maintainAspectRatio: false

        }
    });
    </script>

</body>
</html>
